<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>5000字速通Java的48个关键字及2个保留字</title>
    <url>/posts/58888ec3/</url>
    <content><![CDATA[<h2 id="1、abstract："><a href="#1、abstract：" class="headerlink" title="1、abstract："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_1%E3%80%81abstract">1、abstract：</a></h2><p><strong>用于声明</strong><a href="https://javabetter.cn/oo/abstract.html">抽象类</a>，以及抽象方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abstract class Animal &#123;</span><br><span class="line">    abstract void makeSound();</span><br><span class="line"></span><br><span class="line">    public void sleep() &#123;</span><br><span class="line">        System.out.println(&quot;The animal is sleeping.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">    void makeSound() &#123;</span><br><span class="line">        System.out.println(&quot;The dog barks.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**在这个示例中，我们创建了一个名为 Animal 的抽象类，其中包含一个抽象方法 **<code>makeSound()</code> 和一个具体方法 <code>sleep()</code>。</p>
<h2 id="2、boolean："><a href="#2、boolean：" class="headerlink" title="2、boolean："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_2%E3%80%81boolean">2、boolean：</a></h2><p><strong>Java 中的一种基本数据类型，表示布尔值，即真（true）或假（false）。boolean 数据类型常用于判断条件、循环控制和逻辑运算等场景。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">boolean isStudent = true;</span><br><span class="line"></span><br><span class="line">if (isStudent) &#123;</span><br><span class="line">    System.out.println(&quot;This person is a student.&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    System.out.println(&quot;This person is not a student.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在这个示例中，我们定义了一个 boolean 变量：isStudent。通过 if 语句，我们可以根据这些变量的值进行不同的操作。</strong></p>
<h2 id="3、break："><a href="#3、break：" class="headerlink" title="3、break："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_3%E3%80%81break">3、break：</a></h2><p><strong>用于跳出循环结构（如 for、while 和 do-while 循环）或 switch 语句。当遇到 break 语句时，程序将立即跳出当前循环或 switch 语句，继续执行紧跟在循环或 switch 语句后面的代码。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">    if (i == 5) &#123;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(&quot;i: &quot; + i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;Loop ended.&quot;);</span><br></pre></td></tr></table></figure>

<p><strong>在这个示例中，我们使用 for 循环遍历 0 到 9 的整数。当 i 等于 5 时，我们使用 break 语句跳出循环。</strong></p>
<h2 id="4、byte："><a href="#4、byte：" class="headerlink" title="4、byte："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_4%E3%80%81byte">4、byte：</a></h2><p><strong>用于表示一个 8 位（1 字节）有符号整数。它的值范围是 -128（-2^7）到 127（2^7 - 1）。</strong></p>
<p><strong>由于 byte 类型占用的空间较小，它通常用于处理大量的数据，如文件读写、网络传输等场景，以节省内存空间。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">byte minByte = -128;</span><br><span class="line">byte maxByte = 127;</span><br></pre></td></tr></table></figure>

<p><strong>在这个示例中，我们声明了三个 byte 类型的变量：minByte、maxByte，并分别赋予了不同的值。</strong></p>
<h2 id="5、case："><a href="#5、case：" class="headerlink" title="5、case："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_5%E3%80%81case">5、case：</a></h2><p><strong>通常与 switch 语句一起使用。switch 语句允许根据某个变量的值来选择执行不同的代码块。在 switch 语句中，case 用于标识每个可能的值和对应的代码块。</strong></p>
<p><strong>例子我们直接放到 switch 中一起讲。</strong></p>
<h2 id="6、catch："><a href="#6、catch：" class="headerlink" title="6、catch："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_6%E3%80%81catch">6、catch：</a></h2><p><strong>用于捕获 try 语句中的</strong><a href="https://javabetter.cn/exception/gailan.html">异常</a>。在 try 块中可能会抛出异常，而在 catch 块中可以捕获这些异常并进行处理。catch 块可以有多个，每个 catch 块可以捕获特定类型的异常。在 catch 块中，可以根据需要进行异常处理，例如输出错误信息、进行日志记录、恢复程序状态等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    int num = Integer.parseInt(&quot;abc&quot;);</span><br><span class="line">&#125; catch (NumberFormatException e) &#123;</span><br><span class="line">    System.out.println(&quot;Invalid number format&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这个程序使用 try-catch 语句捕获 NumberFormatException 异常。在 try 块中，尝试将字符串 “abc” 转换为整数类型，由于这个字符串不是有效的数字格式，将会抛出 NumberFormatException 异常。在 catch 块中，捕获到了这个异常，并输出一条错误信息。</strong></p>
<h2 id="7、char："><a href="#7、char：" class="headerlink" title="7、char："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_7%E3%80%81char">7、char：</a></h2><p>**用于声明一个字符类型的变量。char 类型的变量可以存储任意的 **<a href="https://javabetter.cn/basic-extra-meal/java-unicode.html">Unicode 字符</a>，可以使用单引号将字符括起来来表示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char c = &#x27;A&#x27;;</span><br></pre></td></tr></table></figure>

<p><strong>这个程序创建了一个 char 类型的变量 c，并将其赋值为大写字母 A。</strong></p>
<h2 id="8、class："><a href="#8、class：" class="headerlink" title="8、class："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_8%E3%80%81class">8、class：</a></h2><p><strong>用于声明一个</strong><a href="https://javabetter.cn/oo/object-class.html">类</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void sayHello() &#123;</span><br><span class="line">        System.out.println(&quot;Hello, my name is &quot; + name + &quot; and I am &quot; + age + &quot; years old.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9、continue："><a href="#9、continue：" class="headerlink" title="9、continue："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_9%E3%80%81continue">9、continue：</a></h2><p><strong>用于继续下一个循环，可以在指定条件下跳过其余代码。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (int i = 1; i &lt;= 10; i++) &#123;</span><br><span class="line">    if (i % 2 == 0) &#123;</span><br><span class="line">        continue;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10、default："><a href="#10、default：" class="headerlink" title="10、default："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_10%E3%80%81default">10、default：</a></h2><p><strong>用于指定 switch 语句中除去 case 条件之外的默认代码块。这个我们放到 switch 里一起演示。</strong></p>
<h2 id="11、do："><a href="#11、do：" class="headerlink" title="11、do："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_11%E3%80%81do">11、do：</a></h2><p><strong>通常和 while 关键字配合使用，do 后紧跟循环体。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int i = 1;</span><br><span class="line">do &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125; while (i &lt;= 10);</span><br></pre></td></tr></table></figure>

<p><strong>do-while 循环与 while 循环类似，不同之处在于 do-while 循环会先执行循环体中的代码，然后再检查循环条件。因此，do-while 循环至少会执行一次循环体中的代码。</strong></p>
<h2 id="12、double："><a href="#12、double：" class="headerlink" title="12、double："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_12%E3%80%81double">12、double：</a></h2><p><strong>用于声明一个双精度浮点类型的变量。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">double a = 3.14;</span><br><span class="line">double b = 2.0;</span><br><span class="line">double c = a + b;</span><br></pre></td></tr></table></figure>

<h2 id="13、else："><a href="#13、else：" class="headerlink" title="13、else："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_13%E3%80%81else">13、else：</a></h2><p><strong>用于指示 if 语句中的备用分支。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int score = 75;</span><br><span class="line">if (score &gt;= 60) &#123;</span><br><span class="line">    System.out.println(&quot;及格了&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    System.out.println(&quot;挂科了&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="14、enum："><a href="#14、enum：" class="headerlink" title="14、enum："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_14%E3%80%81enum">14、enum：</a></h2><p><strong>用于定义一组固定的常量（</strong><a href="https://javabetter.cn/basic-extra-meal/enum.html">枚举</a>）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public enum PlayerType &#123;</span><br><span class="line">    TENNIS,</span><br><span class="line">    FOOTBALL,</span><br><span class="line">    BASKETBALL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="15、extends："><a href="#15、extends：" class="headerlink" title="15、extends："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_15%E3%80%81extends">15、extends：</a></h2><p><strong>用于指示一个类是从另一个类或接口</strong><a href="https://javabetter.cn/oo/extends-bigsai.html">继承</a>的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Animal &#123;</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(&quot;动物正在吃东西&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">    public void bark() &#123;</span><br><span class="line">        System.out.println(&quot;狗在汪汪叫&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ExtendsDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Dog dog = new Dog();</span><br><span class="line">        dog.eat();</span><br><span class="line">        dog.bark();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**Animal 类中有一个 **<code>eat()</code> 方法，输出字符串 “动物正在吃东西”。Dog 类继承自 Animal 类，并定义了一个 <code>bark()</code> 方法，输出字符串 “狗在汪汪叫”。</p>
<h2 id="16、final："><a href="#16、final：" class="headerlink" title="16、final："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_16%E3%80%81final">16、final：</a></h2><p><a href="https://javabetter.cn/oo/final.html">用于表示某个变量、方法或类是最终的，不能被修改或继承</a>。</p>
<p><strong>①、final 变量：表示一个常量，一旦被赋值，其值就不能再被修改。这在声明不可变的值时非常有用。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">final double PI = 3.14159265359;</span><br></pre></td></tr></table></figure>

<p><strong>②、final 方法表示一个不能被子类重写的方法。这在设计类时，确保某个方法的实现不会被子类修改时非常有用。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Animal &#123;</span><br><span class="line">    final void makeSound() &#123;</span><br><span class="line">        System.out.println(&quot;动物发出声音.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">    // 错误: 无法覆盖来自 Animal 的 final 方法</span><br><span class="line">    // void makeSound() &#123;</span><br><span class="line">    //     System.out.println(&quot;狗吠叫.&quot;);</span><br><span class="line">    // &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Dog dog = new Dog();</span><br><span class="line">        dog.makeSound();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③、final 类表示一个不能被继承的类。这在设计类时，确保其不会被其他类继承时非常有用。</strong><a href="https://javabetter.cn/oo/final.html">String 类就是 final 的</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">final class Animal &#123;</span><br><span class="line">    void makeSound() &#123;</span><br><span class="line">        System.out.println(&quot;动物发出声音.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 错误: 类型 Dog 无法继承 final 类 Animal</span><br><span class="line">// class Dog extends Animal &#123;</span><br><span class="line">//     void makeSound() &#123;</span><br><span class="line">//         System.out.println(&quot;狗吠叫.&quot;);</span><br><span class="line">//     &#125;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Animal animal = new Animal();</span><br><span class="line">        animal.makeSound();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="17、finally："><a href="#17、finally：" class="headerlink" title="17、finally："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_17%E3%80%81finally">17、finally：</a></h2><p>**和 **<code>try-catch</code> 配合使用，表示无论是否处理异常，总是执行 finally 块中的代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    int x = 10 / 0;  // 抛出异常</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    System.out.println(&quot;发生了异常：&quot; + e.getMessage());</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">    System.out.println(&quot;finally 块被执行&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="18、float："><a href="#18、float：" class="headerlink" title="18、float："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_18%E3%80%81float">18、float：</a></h2><p><strong>表示单精度浮点数。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float f1 = 3.14f;   // 注意要在数字后面加上 f 表示这是一个 float 类型</span><br><span class="line">float f2 = 1.23e-4f;   // 科学计数法表示小数</span><br></pre></td></tr></table></figure>

<p><strong>在 Java 中，浮点数默认是 double 类型，如果要使用 float 类型的数据，需要在数字后面加上一个 f 或者 F，表示这是一个 float 类型的字面量。另外，也可以使用科学计数法表示浮点数，例如 1.23e-4 表示 0.000123。</strong></p>
<h2 id="19、for："><a href="#19、for：" class="headerlink" title="19、for："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_19%E3%80%81for">19、for：</a></h2><p><strong>用于声明一个 for 循环，如果循环次数是固定的，建议使用 for 循环。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int[] arr = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(&quot;arr[&quot; + i + &quot;] = &quot; + arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="20、if："><a href="#20、if：" class="headerlink" title="20、if："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_20%E3%80%81if">20、if：</a></h2><p><strong>用于指定条件，如果条件为真，则执行对应代码。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int n = -3;</span><br><span class="line">if (n &gt; 0) &#123;</span><br><span class="line">    System.out.println(n + &quot; 是正数&quot;);</span><br><span class="line">&#125; else if (n &lt; 0) &#123;</span><br><span class="line">    System.out.println(n + &quot; 是负数&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    System.out.println(n + &quot; 是零&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="21、implements："><a href="#21、implements：" class="headerlink" title="21、implements："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_21%E3%80%81implements">21、implements：</a></h2><p><strong>用于实现</strong><a href="https://javabetter.cn/oo/interface.html">接口</a>。</p>
<p><strong>下面是一个实现了 Runnable 接口的类的示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MyThread implements Runnable &#123;</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        // 线程执行的代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="22、import："><a href="#22、import：" class="headerlink" title="22、import："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_22%E3%80%81import">22、import：</a></h2><p><strong>用于导入对应的类或者接口。例如，如果要使用 Java 标准库中的 ArrayList 类，可以这样写：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br></pre></td></tr></table></figure>

<h2 id="23、instanceof："><a href="#23、instanceof：" class="headerlink" title="23、instanceof："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_23%E3%80%81instanceof">23、instanceof：</a></h2><p><a href="https://javabetter.cn/basic-extra-meal/instanceof.html">用于判断对象是否属于某个类型（class）</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如，假设有一个 Person 类和一个 Student 类，Student 类继承自 Person 类，可以使用 instanceof 运算符来判断一个对象是否为 Person 类或其子类的实例：</span><br><span class="line">Person p = new Student();</span><br><span class="line">if (p instanceof Person) &#123;</span><br><span class="line">    System.out.println(&quot;p is an instance of Person&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if (p instanceof Student) &#123;</span><br><span class="line">    System.out.println(&quot;p is an instance of Student&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="24、int："><a href="#24、int：" class="headerlink" title="24、int："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_24%E3%80%81int">24、int：</a></h2><p><strong>用于表示整数值。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int x;           // 声明一个 int 类型的变量 x</span><br><span class="line">x = 10;          // 将整数值 10 赋给变量 x</span><br><span class="line">int y = 20;     // 声明并初始化一个 int 类型的变量 y，赋值为整数值 20</span><br></pre></td></tr></table></figure>

<h2 id="25、interface："><a href="#25、interface：" class="headerlink" title="25、interface："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_25%E3%80%81interface">25、interface：</a></h2><p><strong>用于声明接口。会定义一组方法的签名（即方法名、参数列表和返回值类型），但没有方法体。其他类可以实现接口，并提供方法的具体实现。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface MyInterface &#123;</span><br><span class="line">    void method1();</span><br><span class="line">    int method2(String param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="26、long："><a href="#26、long：" class="headerlink" title="26、long："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_26%E3%80%81long">26、long：</a></h2><p><strong>用于表示长整数值。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">long x;           // 声明一个 long 类型的变量 x</span><br><span class="line">x = 10000000000L; // 将长整数值 10000000000 赋给变量 x，需要在数字后面加上 L 或 l 表示这是一个 long 类型的值</span><br><span class="line">long y = 20000000000L; // 声明并初始化一个 long 类型的变量 y，赋值为长整数值 20000000000</span><br></pre></td></tr></table></figure>

<h2 id="27、native："><a href="#27、native：" class="headerlink" title="27、native："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_27%E3%80%81native">27、native：</a></h2><p><a href="https://javabetter.cn/oo/native-method.html">用于声明一个本地方法</a>，本地方法是指在 Java 代码中声明但在本地代码（通常是 C 或 C++ 代码）中实现的方法，它通常用于与操作系统或其他本地库进行交互。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public native void nativeMethod();</span><br></pre></td></tr></table></figure>

<h2 id="28、new："><a href="#28、new：" class="headerlink" title="28、new："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_28%E3%80%81new">28、new：</a></h2><p><strong>用于创建一个新的对象。</strong></p>
<p><strong>以下是使用 new 关键字创建对象实例的基本语法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ClassName obj = new ClassName();</span><br></pre></td></tr></table></figure>

<p><strong>以下是使用 new 关键字创建数组实例的基本语法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int[] arr = new int[10];</span><br></pre></td></tr></table></figure>

<h2 id="29、null："><a href="#29、null：" class="headerlink" title="29、null："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_29%E3%80%81null">29、null：</a></h2><p><strong>如果一个变量是空的（什么引用也没有指向），就可以将它赋值为 null，和</strong><a href="https://javabetter.cn/exception/npe.html">空指针</a>异常息息相关。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String str = null; // 声明一个字符串引用，初始化为 null</span><br><span class="line">MyClass obj = null; // 声明一个 MyClass 类型的引用，初始化为 null</span><br></pre></td></tr></table></figure>

<h2 id="30、package："><a href="#30、package：" class="headerlink" title="30、package："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_30%E3%80%81package">30、package：</a></h2><p><strong>用于声明类所在的</strong><a href="https://javabetter.cn/oo/package.html">包</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.example.mypackage;</span><br></pre></td></tr></table></figure>

<h2 id="31、private："><a href="#31、private：" class="headerlink" title="31、private："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_31%E3%80%81private">31、private：</a></h2><p><strong>一个</strong><a href="https://javabetter.cn/oo/access-control.html">访问权限修饰符</a>，表示方法或变量只对当前类可见。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MyClass &#123;</span><br><span class="line">    private int x; // 私有属性 x，只能在当前类的内部访问</span><br><span class="line"></span><br><span class="line">    private void foo() &#123;</span><br><span class="line">        // 私有方法 foo，只能在当前类的内部调用</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**在这个示例中，MyClass 类有一个私有属性 x 和一个私有方法 **<code>foo()</code>。这些成员只能在 MyClass 类的内部访问和调用，对其他类不可见。</p>
<h2 id="32、protected："><a href="#32、protected：" class="headerlink" title="32、protected："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_32%E3%80%81protected">32、protected：</a></h2><p><strong>一个访问权限修饰符，表示方法或变量对同一包内的类和所有子类可见。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.example.mypackage;</span><br><span class="line"></span><br><span class="line">public class MyBaseClass &#123;</span><br><span class="line">    protected int x; // 受保护的属性 x，可以被子类和同一包中的其他类访问</span><br><span class="line"></span><br><span class="line">    protected void foo() &#123;</span><br><span class="line">        // 受保护的方法 foo，可以被子类和同一包中的其他类调用</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package com.example.mypackage;</span><br><span class="line"></span><br><span class="line">public class MySubClass extends MyBaseClass &#123;</span><br><span class="line">    public void bar() &#123;</span><br><span class="line">        x = 10; // 可以访问 MyBaseClass 中的受保护属性 x</span><br><span class="line">        foo(); // 可以调用 MyBaseClass 中的受保护方法 foo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**在这个示例中，MyBaseClass 类有一个受保护的属性 x 和一个受保护的方法 **<code>foo()</code>。这些成员可以被子类和同一包中的其他类访问和调用。MySubClass 类继承自 MyBaseClass 类，并可以访问和修改 MyBaseClass 中的受保护成员。</p>
<h2 id="33、public："><a href="#33、public：" class="headerlink" title="33、public："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_33%E3%80%81public">33、public：</a></h2><p><strong>一个访问权限修饰符，除了可以声明方法和变量（所有类可见），还可以声明类。</strong><code>main()</code> 方法必须声明为 public。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MyClass &#123;</span><br><span class="line">    public int x; // 公有属性 x，可以被任何类访问</span><br><span class="line"></span><br><span class="line">    public void foo() &#123;</span><br><span class="line">        // 公有方法 foo，可以被任何类调用</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**在这个示例中，MyClass 类有一个公有属性 x 和一个公有方法 **<code>foo()</code>。这些成员可以被任何类访问和调用，无论这些类是否在同一个包中。</p>
<h2 id="35、return："><a href="#35、return：" class="headerlink" title="35、return："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_35%E3%80%81return">35、return：</a></h2><p><strong>用于从方法中返回一个值或终止方法的执行。return 语句可以将方法的计算结果返回给调用者，或者在方法执行到某个特定条件时提前结束方法。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int add(int a, int b) &#123;</span><br><span class="line">    int sum = a + b;</span><br><span class="line">    return sum; // 返回 sum 的值，并结束方法的执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>此外，return 语句还可以用于提前结束方法的执行。例如，假设我们要编写一个方法，用于判断一个整数是否为偶数：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static boolean isEven(int number) &#123;</span><br><span class="line">    if (number % 2 == 0) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在这个示例中，我们定义了一个名为 isEven 的方法，该方法接收一个整数参数 number。如果 number 是偶数，我们使用 return 语句提前返回 true。否则，方法执行将继续，最后返回 false。</strong></p>
<h2 id="36、short："><a href="#36、short：" class="headerlink" title="36、short："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_36%E3%80%81short">36、short：</a></h2><p><strong>用于表示短整数，占用 2 个字节（16 位）的内存空间。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">short x = 10; // 声明一个 short 类型的变量 x，赋值为 10</span><br><span class="line">short y = 20; // 声明一个 short 类型的变量 y，赋值为 20</span><br></pre></td></tr></table></figure>

<h2 id="37、static："><a href="#37、static：" class="headerlink" title="37、static："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_37%E3%80%81static">37、static：</a></h2><p><strong>表示该变量或方法是</strong><a href="https://javabetter.cn/oo/static.html">静态变量或静态方法</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MyClass &#123;</span><br><span class="line">    public static int x; // 静态变量 x，属于类的成员</span><br><span class="line"></span><br><span class="line">    public static void foo() &#123;</span><br><span class="line">        // 静态方法 foo，属于类的成员</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**在这个示例中，MyClass 类有一个静态变量 x 和一个静态方法 **<code>foo()</code>。这些成员属于类的成员，可以通过类名直接访问，不需要创建对象。</p>
<h2 id="38、strictfp："><a href="#38、strictfp：" class="headerlink" title="38、strictfp："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_38%E3%80%81strictfp">38、strictfp：</a></h2><p><strong>strict floating-point</strong></p>
<p><strong>并不常见，通常用于修饰一个方法，用于限制浮点数计算的精度和舍入行为。当你在类、接口或方法上使用 strictfp 时，该范围内的所有浮点数计算将遵循 IEEE 754 标准的规定，以确保跨平台的浮点数计算的一致性。</strong></p>
<p><strong>不同的硬件平台和 JVM 实现可能对浮点数计算的精度和舍入行为有差异，这可能导致在不同环境中运行相同的浮点数计算代码产生不同的结果。使用 strictfp 关键字可以确保在所有平台上获得相同的浮点数计算结果，避免计算结果的不一致问题。</strong></p>
<p><strong>但请注意，使用 strictfp 可能会对性能产生影响，因为可能需要更多的计算和转换来确保遵循 IEEE 754 标准。因此，在使用 strictfp 时，需要权衡精度和一致性与性能之间的关系。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public strictfp class MyClass &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        double a = 0.1;</span><br><span class="line">        double b = 0.2;</span><br><span class="line">        double result = a + b;</span><br><span class="line">        System.out.println(&quot;Result: &quot; + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Result: 0.30000000000000004</span><br></pre></td></tr></table></figure>

<p><strong>在这个示例中，MyClass 类被声明为 strictfp，因此类中的所有浮点数计算都将遵循 IEEE 754 标准。</strong></p>
<p><strong>在大多数现代操作系统上，使用 strictfp 可能不会产生显著差异，因为大家都遵循 IEEE 754 标准，除非是一些较旧的硬件平台。</strong></p>
<p><strong>IEEE 754 标准（IEEE Standard for Floating-Point Arithmetic）是一个定义浮点数表示和运算的国际标准。由国际电气和电子工程师协会（IEEE）制定，首次发布于 1985 年。</strong></p>
<p><strong>IEEE 754 标准主要规定了以下几个方面：</strong></p>
<p><strong>浮点数表示：标准定义了两种浮点数格式，单精度（32 位）和双精度（64 位）。这两种格式分别由符号位、指数位和尾数位组成，用于表示浮点数的大小和精度。</strong></p>
<p><strong>四舍五入和舍入模式：标准定义了多种舍入模式，例如向最接近的数舍入（Round to Nearest, Ties to Even）、向零舍入（Round toward Zero）、向正无穷舍入（Round toward +∞）和向负无穷舍入（Round toward -∞）等。这些模式指导了浮点数计算过程中如何处理精度损失和舍入误差。</strong></p>
<p><strong>特殊值：标准定义了一些特殊的浮点数值，如正无穷（+∞）、负无穷（-∞）和非数值（NaN）。这些特殊值用于表示浮点数计算中可能出现的溢出、下溢和未定义结果等情况。</strong></p>
<p><strong>浮点数运算：标准规定了浮点数的基本运算（加、减、乘、除）和比较运算（等于、不等于、大于、小于、大于等于、小于等于）的行为和结果。这些运算需要遵循标准中规定的表示、舍入和特殊值处理规则。</strong></p>
<p><strong>来看示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Ieee754Demo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        float a = 0.1f;</span><br><span class="line">        float b = 0.2f;</span><br><span class="line">        float c = a + b;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;a = &quot; + a);</span><br><span class="line">        System.out.println(&quot;b = &quot; + b);</span><br><span class="line">        System.out.println(&quot;c = a + b = &quot; + c);</span><br><span class="line"></span><br><span class="line">        double x = 1.0 / 0.0;</span><br><span class="line">        double y = -1.0 / 0.0;</span><br><span class="line">        double z = 0.0 / 0.0;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;x = 1.0 / 0.0 = &quot; + x);</span><br><span class="line">        System.out.println(&quot;y = -1.0 / 0.0 = &quot; + y);</span><br><span class="line">        System.out.println(&quot;z = 0.0 / 0.0 = &quot; + z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出结果：</strong></p>
<p><img src="https://gitee.com/U_Pikachu/typora-img/raw/master/image/override-overload-20230408151129.png" alt="img"></p>
<p><strong>我们可以看到 IEEE 754 标准中的浮点数表示和运算：</strong></p>
<ul>
<li><strong>单精度浮点数的加法：变量 a 和 b 分别存储了 0.1 和 0.2，它们的和 c 等于 0.3。由于浮点数表示的精度限制，c 的实际值可能与理论值略有误差。</strong></li>
<li><strong>特殊值：变量 x、y 和 z 分别存储了正无穷（+∞）、负无穷（-∞）和非数值（NaN）。这些特殊值是由除法运算产生的，当被除数为 0 或结果无法表示时，会返回相应的特殊值。</strong></li>
</ul>
<h2 id="39、super："><a href="#39、super：" class="headerlink" title="39、super："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_39%E3%80%81super">39、super：</a></h2><p><strong>可用于</strong><a href="https://javabetter.cn/oo/this-super.html">调用父类的方法或者字段</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Animal &#123;</span><br><span class="line">    protected String name;</span><br><span class="line"></span><br><span class="line">    public Animal(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(name + &quot; is eating.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Dog extends Animal &#123;</span><br><span class="line">    public Dog(String name) &#123;</span><br><span class="line">        super(name); // 调用父类的构造方法</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void bark() &#123;</span><br><span class="line">        System.out.println(name + &quot; is barking.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        super.eat(); // 调用父类的方法</span><br><span class="line">        System.out.println(name + &quot; is eating bones.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="40、switch："><a href="#40、switch：" class="headerlink" title="40、switch："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_40%E3%80%81switch">40、switch：</a></h2><p><strong>用于根据某个变量的值选择执行不同的代码块。switch 语句通常与 case 和 default 一起使用。每个 case 子句表示一个可能的值和对应的代码块，而 default 子句用于处理不在 case 子句中的值。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int dayOfWeek = 3;</span><br><span class="line"></span><br><span class="line">        switch (dayOfWeek) &#123;</span><br><span class="line">            case 1:</span><br><span class="line">                System.out.println(&quot;Monday&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                System.out.println(&quot;Tuesday&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                System.out.println(&quot;Wednesday&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case 4:</span><br><span class="line">                System.out.println(&quot;Thursday&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case 5:</span><br><span class="line">                System.out.println(&quot;Friday&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case 6:</span><br><span class="line">                System.out.println(&quot;Saturday&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case 7:</span><br><span class="line">                System.out.println(&quot;Sunday&quot;);</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                System.out.println(&quot;Invalid day&quot;);</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在这个示例中，我们定义了一个名为 dayOfWeek 的整数变量，并赋予了一个值。然后，我们使用 switch 语句根据 dayOfWeek 的值来输出对应的星期几。每个 case 子句表示 dayOfWeek 可能的值，后面紧跟着要执行的代码。使用 break 语句跳出 switch 语句，避免执行其他 case 子句的代码。如果 dayOfWeek 的值不在 case 子句中，default 子句将被执行。</strong></p>
<h2 id="41、synchronized："><a href="#41、synchronized：" class="headerlink" title="41、synchronized："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_41%E3%80%81synchronized">41、synchronized：</a></h2><p><a href="https://javabetter.cn/thread/synchronized-1.html">用于指定多线程代码中的同步方法、变量或者代码块</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MyClass &#123;</span><br><span class="line">    private int count;</span><br><span class="line"></span><br><span class="line">    public synchronized void increment() &#123;</span><br><span class="line">        count++; // 同步方法</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void doSomething() &#123;</span><br><span class="line">        synchronized(this) &#123; // 同步代码块</span><br><span class="line">            // 执行一些需要同步的操作</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="42、this："><a href="#42、this：" class="headerlink" title="42、this："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_42%E3%80%81this">42、this：</a></h2><p><a href="https://javabetter.cn/oo/this-super.html">可用于在方法或构造方法中引用当前对象</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MyClass &#123;</span><br><span class="line">    private int num;</span><br><span class="line"></span><br><span class="line">    public MyClass(int num) &#123;</span><br><span class="line">        this.num = num; // 使用 this 关键字引用当前对象的成员变量</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void doSomething() &#123;</span><br><span class="line">        System.out.println(&quot;Doing something with &quot; + this.num); // 使用 this 关键字引用当前对象的成员变量</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyClass getThis() &#123;</span><br><span class="line">        return this; // 返回当前对象本身</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**在这个示例中，MyClass 类有一个私有成员变量 num，并定义了一个构造方法、一个方法和一个返回当前对象的方法。在构造方法中，使用 this 关键字引用当前对象的成员变量，并将传入的参数赋值给该成员变量。在方法 **<code>doSomething()</code> 中，使用 this 关键字引用当前对象的成员变量，并输出该成员变量的值。在方法 <code>getThis()</code> 中，直接返回当前对象本身。</p>
<h2 id="43、throw："><a href="#43、throw：" class="headerlink" title="43、throw："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_43%E3%80%81throw">43、throw：</a></h2><p><strong>主动抛出</strong><a href="https://javabetter.cn/exception/gailan.html">异常</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MyClass &#123;</span><br><span class="line">    public void doSomething(int num) throws Exception &#123;</span><br><span class="line">        if (num &lt; 0) &#123;</span><br><span class="line">            throw new Exception(&quot;num must be greater than zero&quot;); // 手动抛出异常</span><br><span class="line">        &#125;</span><br><span class="line">        // 执行一些操作</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="44、throws："><a href="#44、throws：" class="headerlink" title="44、throws："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_44%E3%80%81throws">44、throws：</a></h2><p><strong>用于声明异常。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MyClass &#123;</span><br><span class="line">    public void doSomething(int num) throws Exception &#123;</span><br><span class="line">        if (num &lt; 0) &#123;</span><br><span class="line">            throw new Exception(&quot;num must be greater than zero&quot;); // 手动抛出异常</span><br><span class="line">        &#125;</span><br><span class="line">        // 执行一些操作</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="45、transient："><a href="#45、transient：" class="headerlink" title="45、transient："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_45%E3%80%81transient">45、transient：</a></h2><p><a href="https://javabetter.cn/io/transient.html">修饰的字段不会被序列化</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MyClass implements Serializable &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private transient String password;</span><br><span class="line"></span><br><span class="line">    public MyClass(int id, String name, String password) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 省略 getter 和 setter 方法</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;MyClass&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, password=&#x27;&quot; + password + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在这个示例中，MyClass 类实现了 Serializable 接口，表示该类的对象可以被序列化。该类有三个成员变量，分别是 id、name 和 password。其中，password 成员变量被标记为 transient，表示在序列化过程中忽略这个成员变量。</strong></p>
<h2 id="45、try："><a href="#45、try：" class="headerlink" title="45、try："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_45%E3%80%81try">45、try：</a></h2><p><strong>用于包裹要捕获异常的代码块。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    // 可能抛出异常的代码</span><br><span class="line">    int result = 1 / 0;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    // 异常处理代码</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="46、void："><a href="#46、void：" class="headerlink" title="46、void："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_46%E3%80%81void">46、void：</a></h2><p><strong>用于指定方法没有返回值。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void doSomething() &#123;</span><br><span class="line">    // 方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="47、volatile："><a href="#47、volatile：" class="headerlink" title="47、volatile："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_47%E3%80%81volatile">47、volatile：</a></h2><p><strong>保证不同线程对它修饰的变量进行操作时的</strong><a href="https://javabetter.cn/thread/volatile.html">可见性</a>，即一个线程修改了某个变量的值，新值对其他线程来说是立即可见的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MyThread extends Thread &#123;</span><br><span class="line">    private volatile boolean running = true;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (running) &#123;</span><br><span class="line">            // 线程执行的代码</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void stopThread() &#123;</span><br><span class="line">        running = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**在这个示例中，MyThread 类继承了 Thread 类，重写了 **<code>run()</code> 方法。MyThread 类有一个成员变量 running，被标记为 volatile，表示这个变量是共享的，可能会被多个线程同时访问。在 <code>run()</code> 方法中，使用 while 循环检查 running 变量的值，如果 running 为 true，就继续执行循环体中的代码。在另一个方法 <code>stopThread()</code> 中，将 running 变量的值设置为 false，表示需要停止线程。</p>
<h2 id="48、while："><a href="#48、while：" class="headerlink" title="48、while："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_48%E3%80%81while">48、while：</a></h2><p><strong>如果循环次数不固定，建议使用 while 循环。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int i = 0;</span><br><span class="line">while (i &lt; 10) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>“好了，三妹，关于 Java 中的关键字就先说这 48 个吧，这只是一个大概的介绍，后面还会对一些特殊的关键字单独拎出来详细地讲，比如说重要的 static、final 等等，有链接的都是后面会详细讲的。”转动了一下僵硬的脖子后，我对三妹说。</strong></p>
<h2 id="49、goto-和-const："><a href="#49、goto-和-const：" class="headerlink" title="49、goto 和 const："></a><a href="https://javabetter.cn/basic-extra-meal/48-keywords.html#_49%E3%80%81goto-%E5%92%8C-const">49、goto 和 const：</a></h2><p><strong>“除了这些关键字，Java 中还有两个非常特殊的保留字（goto 和 const），它们不能在程序中使用。”</strong></p>
<p><strong>“goto 在 C 语言中叫做‘无限跳转’语句，在 Java 中，不再使用 goto 语句，因为无限跳转会破坏程序结构。”</strong></p>
<p><strong>Java 中确实可以使用标签（label）与 break 和 continue 语句结合来实现类似 goto 的跳转功能。以下是一个简单的示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class LabelDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        outerLoop:</span><br><span class="line">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; 3; j++) &#123;</span><br><span class="line">                if (i == 1 &amp;&amp; j == 1) &#123;</span><br><span class="line">                    System.out.println(&quot;跳过 outerLoop 中的当前迭代&quot;);</span><br><span class="line">                    continue outerLoop;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(&quot;i: &quot; + i + &quot;, j: &quot; + j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;结束&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在这个示例中，我们使用了两层嵌套循环。外层循环有一个名为 outerLoop 的标签。当 i 等于 1 且 j 等于 1 时，我们使用 continue outerLoop 语句跳过外层循环中的当前迭代。这与 goto 的行为类似。</strong></p>
<p><strong>来看输出结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i: 0, j: 0</span><br><span class="line">i: 0, j: 1</span><br><span class="line">i: 0, j: 2</span><br><span class="line">i: 1, j: 0</span><br><span class="line">跳过 outerLoop 中的当前迭代</span><br><span class="line">i: 2, j: 0</span><br><span class="line">i: 2, j: 1</span><br><span class="line">i: 2, j: 2</span><br><span class="line">结束</span><br></pre></td></tr></table></figure>

<p><strong>尽管可以使用标签实现类似 goto 的跳转功能，但这种用法在 Java 中仍然较少见，因为过度使用可能导致代码难以理解和维护。通常建议尽可能使用其他控制结构（如 if、for 和 while 语句）来组织代码。</strong></p>
<p><strong>以下是一个使用 if 和 for 语句替代标签跳转的示例。在这个示例中，我们使用了一个布尔变量 skipIteration 来决定是否跳过外层循环的当前迭代：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class IfForDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">            boolean skipIteration = false;</span><br><span class="line">            for (int j = 0; j &lt; 3; j++) &#123;</span><br><span class="line">                if (i == 1 &amp;&amp; j == 1) &#123;</span><br><span class="line">                    System.out.println(&quot;跳过外层循环中的当前迭代&quot;);</span><br><span class="line">                    skipIteration = true;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(&quot;i: &quot; + i + &quot;, j: &quot; + j);</span><br><span class="line">            &#125;</span><br><span class="line">            if (skipIteration) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在这个示例中，当 i 等于 1 且 j 等于 1 时，我们将 skipIteration 设置为 true，然后使用 break 语句跳出内层循环。在外层循环中，我们检查 skipIteration 变量的值，如果为 true，则跳过外层循环的当前迭代。</strong></p>
<p><strong>这个示例的输出结果与之前的示例相同：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i: 0, j: 0</span><br><span class="line">i: 0, j: 1</span><br><span class="line">i: 0, j: 2</span><br><span class="line">i: 1, j: 0</span><br><span class="line">跳过外层循环中的当前迭代</span><br><span class="line">i: 2, j: 0</span><br><span class="line">i: 2, j: 1</span><br><span class="line">i: 2, j: 2</span><br></pre></td></tr></table></figure>

<p>**“const 在 **<a href="https://javabetter.cn/xuexiluxian/c.html">C 语言</a>中是声明常量的关键字，在 Java 中可以使用 public static final 三个关键字的组合来达到常量的效果。”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Circle &#123;</span><br><span class="line">    public static final double PI = 3.14159;</span><br><span class="line"></span><br><span class="line">    public static double calculateArea(double radius) &#123;</span><br><span class="line">        return PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在这个示例中，我们使用 public static final 关键字组合定义了一个名为 PI 的常量。因为它是 public 的，所以其他类可以访问这个常量。因为它是 static 的，所以它与类关联，而不是类的实例。因为它是 final 的，所以它的值不能被更改。</strong></p>
]]></content>
  </entry>
  <entry>
    <title>晚安</title>
    <url>/posts/74fda535/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>好的卡号是的接口</title>
    <url>/posts/7fefb892/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>文章标题</title>
    <url>/posts/3bf4a27/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
